// Profile Management JavaScript

// DOM Elements
const navToggle = document.querySelector('.nav-toggle');
const navMenu = document.querySelector('.nav-menu');
const navLinks = document.querySelectorAll('.nav-link');
const userDropdown = document.getElementById('userDropdown');
const avatarInput = document.getElementById('avatarInput');
const passwordModal = document.getElementById('passwordModal');
const passwordForm = document.getElementById('passwordForm');

const API_BASE_URL = '/api';

// User data
let currentUser = null;

// ----------------------------------------------------------------
// ‚ö†Ô∏è JWT Token management - –£–î–ê–õ–ï–ù–û: JS –±–æ–ª—å—à–µ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω–æ–º.
// ----------------------------------------------------------------
// –£–¥–∞–ª–∏–ª–∏: getAuthToken, authToken, checkAuth.
// –¢–µ–ø–µ—Ä—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –±—ç–∫–µ–Ω–¥–æ–º —á–µ—Ä–µ–∑ Cookie.

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
function getUserDataFromStorage() {
    try {
        // –ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö —Å—Ä–∞–∑—É
        const userData = localStorage.getItem('user_data');
        return userData ? JSON.parse(userData) : null;
    } catch (error) {
        console.error('Error parsing user data from storage:', error);
        return null;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
function saveUserDataToStorage(userData) {
    try {
        localStorage.setItem('user_data', JSON.stringify(userData));
    } catch (error) {
        console.error('Error saving user data to storage:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
function updateUserDataInStorage(updatedData) {
    try {
        const currentData = getUserDataFromStorage();
        const newData = { ...currentData, ...updatedData };
        saveUserDataToStorage(newData);
        return newData;
    } catch (error) {
        console.error('Error updating user data in storage:', error);
        return null;
    }
}

// Initialize profile page
function initializeProfile() {
    // Mobile navigation
    if (navToggle) {
        navToggle.addEventListener('click', toggleMobileMenu);
    }

    navLinks.forEach(link => {
        link.addEventListener('click', closeMobileMenu);
    });

    // Tab switching
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabName = button.getAttribute('data-tab');
            switchTab(tabName);
        });
    });

    // Form submissions
    const personalForm = document.getElementById('personalForm');
    if (personalForm) {
        personalForm.addEventListener('submit', handlePersonalFormSubmit);
    }

    if (passwordForm) {
        passwordForm.addEventListener('submit', handlePasswordFormSubmit);
    }

    // Password strength indicator
    const newPasswordInput = document.getElementById('newPassword');
    if (newPasswordInput) {
        newPasswordInput.addEventListener('input', updatePasswordStrength);
    }

    // Notification toggles
    setupNotificationToggles();
}

// ‚ö†Ô∏è –£–î–ê–õ–ï–ù–ê: getAuthHeaders() –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç.–∫. —Ç–æ–∫–µ–Ω –≤ Cookie.
// function getAuthHeaders() { ... }

// üí° –ò–ó–ú–ï–ù–ï–ù–û: apiCall —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç Cookie –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
async function apiCall(endpoint, options = {}) {
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        // üí° –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≤–∫–ª—é—á–∞–µ–º Cookie –≤ –∑–∞–ø—Ä–æ—Å—ã
        credentials: 'include',
        headers: {
            'Content-Type': 'application/json',
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization: Bearer {token} –£–î–ê–õ–ï–ù
            ...options.headers // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        },
        ...options,
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º headers –≤—ã—à–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        headers: {
            'Content-Type': 'application/json',
            ...(options.headers || {})
        }
    });

    if (response.status === 401) {
        // –ü—Ä–∏ 401 –∏–ª–∏ 403 —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º.
        // –ë—ç–∫–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ–± –æ—á–∏—Å—Ç–∫–µ HTTP-only Cookie.
        removeAuthData(); // üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        showNotification('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'error');
        setTimeout(() => {
            window.location.href = '/login';
        }, 1000);
        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }

    if (response.status === 403) {
        showNotification('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'error');
        throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }

    if (!response.ok) {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const contentType = response.headers.get('content-type');
        let errorText = `–û—à–∏–±–∫–∞: ${response.status}`;

        if (contentType && contentType.includes('application/json')) {
            try {
                const errorData = await response.json();
                errorText = errorData.message || errorText;
            } catch (e) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø–æ–ø—Ä–æ–±—É–µ–º —Ç–µ–∫—Å—Ç
                errorText = await response.text() || errorText;
            }
        } else {
            errorText = await response.text() || errorText;
        }

        throw new Error(errorText);
    }

    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç 204 No Content, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (response.status === 204) {
        return null;
    }

    return await response.json();
}

// ‚ö†Ô∏è –£–î–ê–õ–ï–ù–ê: checkAuth() –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–∫–µ–Ω—É.
// function checkAuth() { ... }

// üí° –ù–û–í–ê–Ø/–ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Cookie –æ—á–∏—â–∞–µ—Ç—Å—è –±—ç–∫–µ–Ω–¥–æ–º)
function removeAuthData() {
    // üí° –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –±—ç–∫–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å HttpOnly Cookie —Å Max-Age=0.
    localStorage.removeItem('user_data');
    // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–ª—é—á–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    localStorage.removeItem('auth_token');
    sessionStorage.removeItem('auth_token');
}

async function loadUserData() {
    // üí° –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.
    // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, apiCall –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç.

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    currentUser = getUserDataFromStorage();
    if (currentUser) {
        updateUserInterface();
    }

    try {
        const data = await apiCall('/users/profile');

        // üí° –û—Ç–≤–µ—Ç –æ—Ç /profile —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é,
        // –≤–∫–ª—é—á–∞—è —Ç–µ –∂–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥–ª—è storeAuthData.
        currentUser = transformUserData(data);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
        const userBasicData = {
            id: currentUser.id,
            email: currentUser.email,
            firstName: currentUser.firstName,
            lastName: currentUser.lastName,
            role: data.role || 'USER' // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å
        };
        saveUserDataToStorage(userBasicData);

        updateUserInterface();
    } catch (error) {
        console.error('Failed to load user data:', error);
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞, –Ω–æ —ç—Ç–æ –Ω–µ 401 (—Ç.–∫. 401 —É–∂–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª)
        if (!error.message.includes('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')) {
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. ' + error.message, 'error');
        }
    }
}

function transformUserData(apiData) {
    return {
        id: apiData.id,
        name: `${apiData.firstName} ${apiData.lastName}`,
        firstName: apiData.firstName,
        lastName: apiData.lastName,
        middleName: apiData.middleName || '',
        email: apiData.email,
        phone: apiData.phone,
        birthDate: apiData.birthDate,
        gender: apiData.gender?.toLowerCase() || 'male',
        wallet: apiData.balance ? Number(apiData.balance) : 0,
        // üí° –ê–≤–∞—Ç–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω/—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ, –∑–¥–µ—Å—å –∑–∞–≥–ª—É—à–∫–∞
        avatar: apiData.avatarUrl || 'üë§',
        stats: {
            bookings: apiData.totalBookings || 0,
            rating: apiData.averageRating || 4.9,
            yearsWithUs: apiData.membershipYears || 1
        }
    };
}

async function updateProfileOnBackend(profileData) {
    const requestData = {
        firstName: profileData.firstName,
        lastName: profileData.lastName,
        middleName: profileData.middleName,
        email: profileData.email,
        phone: profileData.phone,
        birthDate: profileData.birthDate,
        gender: profileData.gender.toUpperCase()
    };

    const data = await apiCall('/users/profile', {
        method: 'PUT',
        body: JSON.stringify(requestData)
    });

    return transformUserData(data);
}

async function changePasswordOnBackend(passwordData) {
    // üí° –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç Cookie
    await apiCall('/users/change-password', {
        method: 'POST',
        body: JSON.stringify(passwordData)
    });
}

// Mobile navigation
function toggleMobileMenu() {
    navMenu.classList.toggle('active');
    navToggle.classList.toggle('active');
}

function closeMobileMenu() {
    navMenu.classList.remove('active');
    navToggle.classList.remove('active');
}

// User menu
function toggleUserMenu() {
    const dropdown = document.getElementById('userDropdown');
    if (dropdown) {
        dropdown.classList.toggle('show');
    }
}

// Tab switching
function switchTab(tabName) {
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));

    const activeTab = document.querySelector(`[data-tab="${tabName}"]`);
    const activeContent = document.getElementById(`${tabName}-tab`);

    if (activeTab) activeTab.classList.add('active');
    if (activeContent) activeContent.classList.add('active');
}

// Edit personal information
function editPersonalInfo() {
    const form = document.getElementById('personalForm');
    const inputs = form.querySelectorAll('input, select, textarea');
    const editBtn = document.querySelector('.card-header .btn-primary');
    const formActions = form.querySelector('.form-actions');

    inputs.forEach(input => {
        input.removeAttribute('readonly');
        input.disabled = false;
    });

    if (formActions) {
        formActions.style.display = 'flex';
    }

    if (editBtn) {
        editBtn.innerHTML = '<i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        editBtn.onclick = () => form.dispatchEvent(new Event('submit'));
    }
}

function cancelEdit() {
    const form = document.getElementById('personalForm');
    const inputs = form.querySelectorAll('input, select, textarea');
    const editBtn = document.querySelector('.card-header .btn-primary');
    const formActions = form.querySelector('.form-actions');

    updateFormFields();

    inputs.forEach(input => {
        input.setAttribute('readonly', 'readonly');
        if (input.tagName === 'SELECT') {
            input.disabled = true;
        }
    });

    if (formActions) {
        formActions.style.display = 'none';
    }

    if (editBtn) {
        editBtn.innerHTML = '<i class="fas fa-edit"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
        editBtn.onclick = editPersonalInfo;
    }
}

// Handle personal form submission
async function handlePersonalFormSubmit(e) {
    e.preventDefault();

    const formData = new FormData(e.target);
    const updatedData = {
        firstName: formData.get('firstName'),
        lastName: formData.get('lastName'),
        middleName: formData.get('middleName') || '',
        email: formData.get('email'),
        phone: formData.get('phone'),
        birthDate: formData.get('birthDate'),
        gender: formData.get('gender')
    };

    if (!updatedData.firstName || !updatedData.lastName || !updatedData.email) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return;
    }

    if (!isValidEmail(updatedData.email)) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email', 'error');
        return;
    }

    try {
        const updatedUser = await updateProfileOnBackend(updatedData);
        Object.assign(currentUser, updatedUser);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
        const updatedBasicData = {
            firstName: updatedData.firstName,
            lastName: updatedData.lastName,
            email: updatedData.email
        };
        updateUserDataInStorage(updatedBasicData);

        updateUserInterface();
        showNotification('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
        cancelEdit();
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ' + error.message, 'error');
    }
}

// Avatar handling
function changeProfilePhoto() {
    if (avatarInput) {
        avatarInput.click();
    }
}

function handleAvatarChange(event) {
    const file = event.target.files[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
        return;
    }

    if (file.size > 5 * 1024 * 1024) {
        showNotification('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', 'error');
        return;
    }

    const reader = new FileReader();
    reader.onload = function (e) {
        const profileAvatar = document.getElementById('profileAvatar');
        const avatarPlaceholder = profileAvatar?.querySelector('.avatar-placeholder');

        if (avatarPlaceholder) {
            avatarPlaceholder.innerHTML = `<img src="${e.target.result}" alt="Avatar">`;
        }

        currentUser.avatar = e.target.result;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ localStorage
        const userData = getUserDataFromStorage();
        if (userData) {
            userData.avatar = e.target.result;
            saveUserDataToStorage(userData);
        }

        updateUserInterface();
        showNotification('–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
    };
    reader.readAsDataURL(file);
}

// Password management
function changePassword() {
    if (passwordModal) {
        passwordModal.classList.add('show');
        document.body.style.overflow = 'hidden';
    }
}

function closePasswordModal() {
    if (passwordModal) {
        passwordModal.classList.remove('show');
        document.body.style.overflow = 'auto';
        passwordForm.reset();
        updatePasswordStrength();
    }
}

async function handlePasswordFormSubmit(e) {
    e.preventDefault();

    const formData = new FormData(e.target);
    const passwordData = {
        currentPassword: formData.get('currentPassword'),
        newPassword: formData.get('newPassword'),
        confirmPassword: formData.get('confirmPassword')
    };

    if (!passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }

    if (passwordData.newPassword !== passwordData.confirmPassword) {
        showNotification('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
        return;
    }

    if (passwordData.newPassword.length < 6) {
        showNotification('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
        return;
    }

    try {
        await changePasswordOnBackend(passwordData);
        showNotification('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', 'success');
        closePasswordModal();
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: ' + error.message, 'error');
    }
}

function updatePasswordStrength() {
    const passwordInput = document.getElementById('newPassword');
    const strengthIndicator = document.getElementById('passwordStrength');

    if (!passwordInput || !strengthIndicator) return;

    const password = passwordInput.value;
    let strength = 0;

    if (password.length >= 6) strength++;
    if (password.match(/[a-z]/)) strength++;
    if (password.match(/[A-Z]/)) strength++;
    if (password.match(/[0-9]/)) strength++;
    if (password.match(/[^a-zA-Z0-9]/)) strength++;

    strengthIndicator.className = 'password-strength';

    if (password.length === 0) {
        strengthIndicator.style.width = '0%';
    } else if (strength <= 2) {
        strengthIndicator.classList.add('weak');
        strengthIndicator.style.width = '33%';
    } else if (strength <= 3) {
        strengthIndicator.classList.add('medium');
        strengthIndicator.style.width = '66%';
    } else {
        strengthIndicator.classList.add('strong');
        strengthIndicator.style.width = '100%';
    }
}

// Additional features
function setup2FA() {
    showNotification('–§—É–Ω–∫—Ü–∏—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ', 'info');
}

function viewLoginHistory() {
    showNotification('–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏', 'info');
}

function setupNotificationToggles() {
    const toggles = document.querySelectorAll('.switch input[type="checkbox"]');
    toggles.forEach(toggle => {
        toggle.addEventListener('change', function () {
            const setting = this.closest('.notification-item').querySelector('span').textContent;
            const isEnabled = this.checked;
            showNotification(`${setting} ${isEnabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}`, 'info');
        });
    });
}

// Update UI
function updateUserInterface() {
    if (!currentUser) return;

    // Update profile header
    const profileName = document.getElementById('profileName');
    const profileEmail = document.getElementById('profileEmail');
    const profileAvatar = document.getElementById('profileAvatar');
    const userName = document.getElementById('userName');
    const userWallet = document.getElementById('userWallet');
    const userAvatar = document.getElementById('userAvatar');

    if (profileName) profileName.textContent = currentUser.name;
    if (profileEmail) profileEmail.textContent = currentUser.email;
    if (userName) userName.textContent = currentUser.name;
    if (userWallet) userWallet.textContent = currentUser.wallet ? currentUser.wallet.toLocaleString() + '‚ÇΩ' : '0‚ÇΩ';

    // Update avatars
    const updateAvatar = (element) => {
        if (!element) return;

        if (currentUser.avatar && currentUser.avatar.startsWith('data:')) {
            element.innerHTML = `<img src="${currentUser.avatar}" alt="Avatar">`;
        } else {
            element.innerHTML = '<i class="fas fa-user"></i>';
        }
    };

    if (profileAvatar) {
        const avatarPlaceholder = profileAvatar.querySelector('.avatar-placeholder');
        updateAvatar(avatarPlaceholder);
    }
    updateAvatar(userAvatar);

    // Update stats
    if (currentUser.stats) {
        const statNumbers = document.querySelectorAll('.stat-number');
        if (statNumbers.length >= 3) {
            statNumbers[0].textContent = currentUser.stats.bookings || 0;
            statNumbers[1].textContent = currentUser.stats.rating || 0;
            statNumbers[2].textContent = currentUser.stats.yearsWithUs || 0;
        }
    }

    updateFormFields();
}

function updateFormFields() {
    if (!currentUser) return;

    const fields = {
        firstName: currentUser.firstName,
        lastName: currentUser.lastName,
        email: currentUser.email,
        phone: currentUser.phone,
        birthDate: currentUser.birthDate,
        gender: currentUser.gender
    };

    Object.keys(fields).forEach(fieldName => {
        const field = document.getElementById(fieldName);
        if (field) {
            field.value = fields[fieldName] || '';
        }
    });
}

// Utilities
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function showNotification(message, type = 'info') {
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());

    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
            <span>${message}</span>
            <button class="notification-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;

    notification.querySelector('.notification-close').onclick = () => notification.remove();

    Object.assign(notification.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        background: type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6',
        color: 'white',
        padding: '1rem 1.5rem',
        borderRadius: '12px',
        boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)',
        zIndex: '10000',
        animation: 'slideInRight 0.3s ease',
        maxWidth: '400px'
    });

    document.body.appendChild(notification);

    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}

// üí° –ò–ó–ú–ï–ù–ï–ù–û: logout —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç removeAuthData()
function logout() {
    // üí° –ù–∞—Å—Ç–æ—è—â–∏–π –≤—ã—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å–æ–º –∫ API, —á—Ç–æ–±—ã –±—ç–∫–µ–Ω–¥ –æ—á–∏—Å—Ç–∏–ª Cookie
    // –ù–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:
    removeAuthData();
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –æ—á–∏—Å—Ç–∏—Ç Cookie –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.location.href = '/login';
}

// Theme management
function initTheme() {
    const savedTheme = localStorage.getItem('theme') || 'light';
    setTheme(savedTheme);
}

function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);

    const themeIcon = document.getElementById('themeIcon');
    if (themeIcon) {
        themeIcon.className = theme === 'dark' ? 'fas fa-moon' : 'fas fa-sun';
    }
}

function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
}

// Event listeners
function setupEventListeners() {
    document.addEventListener('click', function (e) {
        const dropdown = document.getElementById('userDropdown');
        if (dropdown && !e.target.closest('.user-menu')) {
            dropdown.classList.remove('show');
        }
    });

    document.addEventListener('click', function (e) {
        if (e.target.classList.contains('modal')) {
            closePasswordModal();
        }
    });

    document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape') {
            closePasswordModal();
        }
    });
}

// Initialize app
document.addEventListener('DOMContentLoaded', function () {
    // ‚ö†Ô∏è –£–î–ê–õ–ï–ù–ê: if (!checkAuth()) return;

    // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI, –ø–æ—Ç–æ–º –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    initializeProfile();
    loadUserData();
    setupEventListeners();
    initTheme();
});