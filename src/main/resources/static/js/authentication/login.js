// DOM Elements
const loginForm = document.getElementById('loginForm');
const emailInput = document.getElementById('email');
const passwordInput = document.getElementById('password');
const rememberCheckbox = document.getElementById('remember');
const submitBtn = document.querySelector('.auth-btn-primary');

// API Base URL
const API_BASE_URL = 'http://localhost:8080/api';

// ‚ö†Ô∏è JWT Token management - –ú–´ –ë–û–õ–¨–®–ï –ù–ï –•–†–ê–ù–ò–ú –¢–û–ö–ï–ù –í LOCALSTORAGE
// –û—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const USER_KEY = 'user_data';

// ----------------------------------------------------------------
// ‚ö†Ô∏è –£–¥–∞–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏: getToken(), setToken().
// –ë—ç–∫–µ–Ω–¥ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç JWT —á–µ—Ä–µ–∑ HTTP-Only Cookies.
// ----------------------------------------------------------------

// –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ Cookie, –µ—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–æ –≤–æ–∑–º–æ–∂–Ω–æ)
function removeAuthData() {
    // üí° –¢–∞–∫ –∫–∞–∫ JWT —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ HttpOnly Cookie, JS –Ω–µ –º–æ–∂–µ—Ç –µ–≥–æ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é.
    // –ù–∞ –±—ç–∫–µ–Ω–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω /logout, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–ª–∏–µ–Ω—Ç—É Cookie —Å maxAge=0.
    localStorage.removeItem(USER_KEY);
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserData() {
    const userData = localStorage.getItem(USER_KEY);
    return userData ? JSON.parse(userData) : null;
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function setUserData(userData) {
    localStorage.setItem(USER_KEY, JSON.stringify(userData));
}

// Store authentication data (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
function storeAuthData(authResponse) {
    // üí° JWT —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±—ç–∫–µ–Ω–¥–æ–º –≤ HTTP-Only Cookie.
    // –ù–∞ –∫–ª–∏–µ–Ω—Ç–µ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    if (authResponse && authResponse.user) {
        setUserData(authResponse.user);
    }
}
// Form validation
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function validatePassword(password) {
    return password.length >= 6;
}

function showError(inputId, message) {
    const input = document.getElementById(inputId);
    const errorElement = document.getElementById(inputId + 'Error');

    input.classList.add('error');
    input.classList.remove('success');
    errorElement.textContent = message;
    errorElement.classList.add('show');
}

function clearError(inputId) {
    const input = document.getElementById(inputId);
    const errorElement = document.getElementById(inputId + 'Error');

    input.classList.remove('error');
    input.classList.remove('success');
    errorElement.classList.remove('show');
}

function showSuccess(inputId) {
    const input = document.getElementById(inputId);
    const errorElement = document.getElementById(inputId + 'Error');

    input.classList.add('success');
    input.classList.remove('error');
    errorElement.classList.remove('show');
}

// Real-time validation
emailInput.addEventListener('input', function() {
    const email = this.value.trim();

    if (email === '') {
        clearError('email');
        return;
    }

    if (validateEmail(email)) {
        showSuccess('email');
    } else {
        showError('email', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
    }
});

passwordInput.addEventListener('input', function() {
    const password = this.value;

    if (password === '') {
        clearError('password');
        return;
    }

    if (validatePassword(password)) {
        showSuccess('password');
    } else {
        showError('password', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
    }
});

// Password toggle functionality
function togglePassword() {
    const passwordInput = document.getElementById('password');
    const passwordIcon = document.getElementById('passwordIcon');

    if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        passwordIcon.classList.remove('fa-eye');
        passwordIcon.classList.add('fa-eye-slash');
    } else {
        passwordInput.type = 'password';
        passwordIcon.classList.remove('fa-eye-slash');
        passwordIcon.classList.add('fa-eye');
    }
}

// Loading state
function setLoadingState(isLoading) {
    const btnText = submitBtn.querySelector('.btn-text');
    const btnLoading = submitBtn.querySelector('.btn-loading');

    if (isLoading) {
        submitBtn.classList.add('loading');
        submitBtn.disabled = true;
        btnText.style.opacity = '0';
        btnLoading.style.display = 'flex';
    } else {
        submitBtn.classList.remove('loading');
        submitBtn.disabled = false;
        btnText.style.opacity = '1';
        btnLoading.style.display = 'none';
    }
}

// Show notification
function showNotification(message, type = 'info') {
    // Remove existing notifications
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());

    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
            <span>${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;

    // Add styles
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        z-index: 10000;
        animation: slideInRight 0.3s ease;
        max-width: 400px;
    `;

    // Add to document
    document.body.appendChild(notification);

    // Auto remove after 5 seconds
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
}

// Add notification styles
const notificationStyles = document.createElement('style');
notificationStyles.textContent = `
    .notification-content {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    .notification-close {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 0;
        margin-left: auto;
    }
    
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
`;
document.head.appendChild(notificationStyles);

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è API Request function
async function makeRequest(url, method, data) {
    const options = {
        method: method,
        headers: {
            'Content-Type': 'application/json',
        },
        // üí° –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≤–∫–ª—é—á–∞–µ–º Cookie –≤ –∑–∞–ø—Ä–æ—Å—ã
        credentials: 'include'
    };

    if (data) {
        options.body = JSON.stringify(data);
    }

    try {
        const response = await fetch(url, options);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const contentType = response.headers.get('content-type');
        const hasJson = contentType && contentType.includes('application/json');
        const hasContent = response.status !== 204; // No Content

        if (!response.ok) {
            let errorMessage = `HTTP error! status: ${response.status}`;

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if (hasJson && hasContent) {
                try {
                    const errorData = await response.json();
                    errorMessage = errorData.message || errorMessage;
                } catch (e) {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (hasContent) {
                        try {
                            const text = await response.text();
                            errorMessage = text || errorMessage;
                        } catch (textError) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                        }
                    }
                }
            }

            throw new Error(errorMessage);
        }

        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∏ –µ—Å—Ç—å JSON –∫–æ–Ω—Ç–µ–Ω—Ç - –ø–∞—Ä—Å–∏–º –µ–≥–æ
        if (hasJson && hasContent) {
            return await response.json();
        } else if (hasContent) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ –Ω–µ JSON - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
            return await response.text();
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 204 No Content) - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
            return null;
        }
    } catch (error) {
        console.error('API request failed:', error);
        throw error;
    }
}

// Login function
async function loginUser(email, password) {
    const loginData = {
        email: email,
        password: password
    };

    // üí° –ë—ç–∫–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å JWT –≤ HttpOnly Cookie –≤ –æ—Ç–≤–µ—Ç
    return await makeRequest(`${API_BASE_URL}/auth/login`, 'POST', loginData);
}

// Form submission
loginForm.addEventListener('submit', async function(e) {
    e.preventDefault();

    const email = emailInput.value.trim();
    const password = passwordInput.value;

    // Clear previous errors
    clearError('email');
    clearError('password');

    // Validate form
    let isValid = true;

    if (!email) {
        showError('email', '–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å');
        isValid = false;
    } else if (!validateEmail(email)) {
        showError('email', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
        isValid = false;
    }

    if (!password) {
        showError('password', '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        isValid = false;
    } else if (!validatePassword(password)) {
        showError('password', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        isValid = false;
    }

    if (!isValid) {
        return;
    }

    // Set loading state
    setLoadingState(true);

    try {
        // Make API call
        const authResponse = await loginUser(email, password);

        // üí° –ü—Ä–æ–≤–µ—Ä–∫–∞ token –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω—ã
        if (authResponse && authResponse.user) {
            // Store authentication data (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage)
            storeAuthData(authResponse);

            showNotification('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!', 'success');

            // Redirect to home page after a short delay
            setTimeout(() => {
                window.location.href = '/';
            }, 1500);
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (authResponse.user)
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

    } catch (error) {
        console.error('Login error:', error);

        // –ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if (error.message.includes('401') || error.message.includes('Unauthorized')) {
            showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error');
        } else if (error.message.includes('Network Error')) {
            showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.', 'error');
        } else if (error.message.includes('400')) {
            showNotification('–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞', 'error');
        } else {
            showNotification(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
        }

        setLoadingState(false);
    }
});

// Social login handlers
document.querySelector('.social-google')?.addEventListener('click', function() {
    showNotification('–§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ', 'info');
});

document.querySelector('.social-facebook')?.addEventListener('click', function() {
    showNotification('–§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Facebook –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ', 'info');
});

// Forgot password handler
document.querySelector('.forgot-link')?.addEventListener('click', function(e) {
    e.preventDefault();
    showNotification('–§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ', 'info');
});

// Theme management
function initTheme() {
    const savedTheme = localStorage.getItem('theme') || 'light';
    setTheme(savedTheme);
}

function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);

    const themeIcon = document.getElementById('themeIcon');
    if (themeIcon) {
        themeIcon.className = theme === 'dark' ? 'fas fa-moon' : 'fas fa-sun';
    }
}

function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
}

// Check if user is already logged in
document.addEventListener('DOMContentLoaded', function() {
    // Initialize theme
    initTheme();

    // ‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: —Ç–µ–ø–µ—Ä—å –±—ç–∫–µ–Ω–¥ —Ä–µ—à–∞–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    // –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É—è Cookie.
    const userData = getUserData();

    if (userData) {
        // –ú—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LS, —Ç–æ Cookie —Ç–æ–∂–µ –≤–∞–ª–∏–¥–µ–Ω
        // –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –ï—Å–ª–∏ Cookie –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, Spring Security
        // –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ /login –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        showNotification('–í—ã —É–∂–µ –≤—Ö–æ–¥–∏–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ï—Å–ª–∏ Cookie –≤–∞–ª–∏–¥–µ–Ω, –≤—ã –±—É–¥–µ—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.', 'info');
    }
});

// Add smooth animations
document.addEventListener('DOMContentLoaded', function() {
    const authCard = document.querySelector('.auth-card');
    if (authCard) {
        authCard.style.opacity = '0';
        authCard.style.transform = 'translateY(30px)';

        setTimeout(() => {
            authCard.style.transition = 'all 0.6s ease';
            authCard.style.opacity = '1';
            authCard.style.transform = 'translateY(0)';
        }, 100);
    }
});

// Add keyboard navigation
document.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && e.target.classList.contains('form-input')) {
        const inputs = Array.from(document.querySelectorAll('.form-input'));
        const currentIndex = inputs.indexOf(e.target);

        if (currentIndex < inputs.length - 1) {
            inputs[currentIndex + 1].focus();
        } else {
            loginForm.dispatchEvent(new Event('submit'));
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
async function debugLogin() {
    console.log('Testing login API...');

    try {
        const response = await fetch(`${API_BASE_URL}/auth/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                email: 'test@test.com',
                password: 'password'
            }),
            // üí° –í–∫–ª—é—á–∞–µ–º credentials: 'include'
            credentials: 'include'
        });

        console.log('Response status:', response.status);
        console.log('Response headers:', Object.fromEntries(response.headers.entries()));

        const text = await response.text();
        console.log('Response text:', text);

        try {
            const json = JSON.parse(text);
            console.log('Response JSON:', json);
            return json;
        } catch (e) {
            console.log('Response is not JSON');
            return text;
        }
    } catch (error) {
        console.error('Debug request failed:', error);
        throw error;
    }
}

// –î–æ–±–∞–≤—å—Ç–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugLogin = debugLogin;