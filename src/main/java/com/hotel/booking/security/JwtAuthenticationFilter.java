package com.hotel.booking.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie; // üí° –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cookie
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Arrays; // üí° –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

@Slf4j
@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtTokenProvider jwtProvider;
    private final CustomUserServiceImpl userDetailsService;

    // üí° –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∏–º–µ–Ω–∏ Cookie
    private static final String JWT_COOKIE_NAME = "auth_jwt";

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        // üí° –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Ç–æ–∫–µ–Ω –≤ Cookie –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        String token = resolveToken(request);

        if (token != null && jwtProvider.validateToken(token)) {
            try {
                String userId = jwtProvider.getUserIdFromToken(token);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                if (SecurityContextHolder.getContext().getAuthentication() == null) {
                    UserDetails userDetails = userDetailsService.loadUserById(userId);

                    UsernamePasswordAuthenticationToken authentication =
                            new UsernamePasswordAuthenticationToken(
                                    userDetails,
                                    null,
                                    userDetails.getAuthorities()
                            );

                    authentication.setDetails(
                            new WebAuthenticationDetailsSource().buildDetails(request)
                    );

                    SecurityContextHolder.getContext().setAuthentication(authentication);

                    log.debug("‚úÖ Authenticated user: {}", userDetails.getUsername());
                }
            } catch (Exception e) {
                log.error("‚ùå Error loading user by ID or validating token: {}", e.getMessage());
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å JWT) –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                SecurityContextHolder.clearContext();
            }
        }

        filterChain.doFilter(request, response);
    }

    /**
     * –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å JWT —Ç–æ–∫–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∏–∑ HTTP-only Cookie,
     * –∞ –∑–∞—Ç–µ–º –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–∞–∫ Postman).
     */
    private String resolveToken(HttpServletRequest request) {
        // 1. –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –≤ Cookie
        if (request.getCookies() != null) {
            String tokenFromCookie = Arrays.stream(request.getCookies())
                    .filter(cookie -> JWT_COOKIE_NAME.equals(cookie.getName()))
                    .findFirst()
                    .map(Cookie::getValue)
                    .orElse(null);

            if (tokenFromCookie != null && !tokenFromCookie.isBlank()) {
                log.debug("Token resolved from Cookie: {}", JWT_COOKIE_NAME);
                return tokenFromCookie;
            }
        }

        // 2. –ï—Å–ª–∏ –≤ Cookie –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization (–∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String tokenFromHeader = authHeader.substring(7);
            if (!tokenFromHeader.trim().isEmpty() && !tokenFromHeader.equals("null") && !tokenFromHeader.equals("undefined")) {
                log.debug("Token resolved from Authorization header.");
                return tokenFromHeader;
            }
        }

        return null;
    }
}
