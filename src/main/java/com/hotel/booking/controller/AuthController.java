package com.hotel.booking.controller;

import com.hotel.booking.dto.request.auth.LoginRequest;
import com.hotel.booking.dto.request.auth.RegisterRequest;
import com.hotel.booking.dto.response.auth.AuthResponse;
import com.hotel.booking.dto.response.auth.UserInfoResponse; // üí° –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞ –≤ Logout
import com.hotel.booking.service.AuthService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseCookie;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {

    private final AuthService authService;

    // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ Cookie (24 —á–∞—Å–∞)
    private static final int COOKIE_MAX_AGE = 24 * 60 * 60;

    // –ò–º—è JWT Cookie
    private static final String JWT_COOKIE_NAME = "auth_jwt";

    private ResponseCookie createJwtCookie(String token, int maxAge) {
        return ResponseCookie.from(JWT_COOKIE_NAME, token)
                .httpOnly(true)
                .secure(false)
                .path("/")
                .maxAge(maxAge)
                .sameSite("Lax")
                .build();
    }

    // --- –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
    @PostMapping("/register")
    public ResponseEntity<AuthResponse> register(@Valid @RequestBody RegisterRequest request) {
        // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º AuthResponse (–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç JWT –∏ User DTO)
        AuthResponse authResponse = authService.register(request);

        // 2. –°–æ–∑–¥–∞–µ–º HTTP-only Cookie –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        ResponseCookie cookie = createJwtCookie(authResponse.getToken(), COOKIE_MAX_AGE);

        // 3. üí° –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç authResponse –≤ —Ç–µ–ª–µ.
        return ResponseEntity.ok()
                .header(HttpHeaders.SET_COOKIE, cookie.toString())
                .body(authResponse); // ‚¨ÖÔ∏è –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–û–õ–ù–´–ô AuthResponse
    }

    // --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤—Ö–æ–¥–∞ ---
    @PostMapping("/login")
    public ResponseEntity<AuthResponse> login(@Valid @RequestBody LoginRequest request) {
        // 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º AuthResponse
        AuthResponse authResponse = authService.login(request);

        // 2. –°–æ–∑–¥–∞–µ–º HTTP-only Cookie –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        ResponseCookie cookie = createJwtCookie(authResponse.getToken(), COOKIE_MAX_AGE);

        // 3. üí° –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç authResponse –≤ —Ç–µ–ª–µ.
        return ResponseEntity.ok()
                .header(HttpHeaders.SET_COOKIE, cookie.toString())
                .body(authResponse); // ‚¨ÖÔ∏è –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–û–õ–ù–´–ô AuthResponse
    }

    // --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤—ã—Ö–æ–¥–∞ (Logout) ---
    @PostMapping("/logout")
    public ResponseEntity<Void> logout(HttpServletRequest request) {
        // –°–æ–∑–¥–∞–µ–º "–ø—É—Å—Ç–æ–π" Cookie —Å maxAge=0, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
        ResponseCookie cookie = createJwtCookie("", 0);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, —É–¥–∞–ª—è—é—â–∏–º Cookie
        return ResponseEntity.ok()
                .header(HttpHeaders.SET_COOKIE, cookie.toString())
                .build();
    }
}
